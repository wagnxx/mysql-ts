import { interfaces } from "./interfaces";
import { PARAMETER_TYPE } from "./constants";
export declare function controller(path: string, ...middleware: interfaces.Middleware[]): (target: any) => void;
export declare function all(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpGet(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpPost(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpPut(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpPatch(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpHead(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpDelete(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function httpMethod(method: string, path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare const request: (name?: string) => ParameterDecorator;
export declare const response: (name?: string) => ParameterDecorator;
export declare const requestParam: (name?: string) => ParameterDecorator;
export declare const queryParam: (name?: string) => ParameterDecorator;
export declare const requestBody: (name?: string) => ParameterDecorator;
export declare const requestHeaders: (name?: string) => ParameterDecorator;
export declare const cookies: (name?: string) => ParameterDecorator;
export declare const next: (name?: string) => ParameterDecorator;
export declare const context: (name?: string) => ParameterDecorator;
export declare function params(type: PARAMETER_TYPE, parameterName: string): (target: Object, methodName: string, index: number) => void;
